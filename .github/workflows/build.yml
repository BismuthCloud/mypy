name: Build wheels

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build ${{ matrix.only }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        only: ['cp38-manylinux_x86_64','cp39-manylinux_x86_64','cp310-manylinux_x86_64','cp311-manylinux_x86_64','cp312-manylinux_x86_64']

    steps:
      - uses: actions/checkout@v4

      - uses: pypa/cibuildwheel@v2.19.2
        with:
          config-file: cibuildwheel.toml
          package-dir: .
          only: ${{ matrix.only }}

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.only }}
          path: ./wheelhouse/*.whl
          overwrite: true

  release:
    name: create release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true
      - name: Release
        if: ${{ github.event_name != 'pull_request' }}
        # https://github.com/actions/upload-release-asset/issues/47
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;

            console.log('environment', process.versions);
            console.log({ owner, repo, sha });

            const release = await github.rest.repos.createRelease({
              owner, repo,
              // if GITHUB_REF just appears to be a branch, use tag-{commit} as the tag
              tag_name: process.env.GITHUB_REF.includes("refs/heads/") ? "tag-" + sha : process.env.GITHUB_REF.split("/").pop(),
              target_commitish: sha
            });

            console.log('created release', { release });

            for (let file of await fs.readdir('dist')) {
              console.log('uploading', file);

              await github.rest.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./dist/${file}`)
              });
            }
